// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    static readonly ForumClass s_Forum = new ForumClass();
    public static ForumClass Forum { get { return s_Forum; } }
    static readonly TopicsClass s_Topics = new TopicsClass();
    public static TopicsClass Topics { get { return s_Topics; } }
    public static MirGames.Controllers.AccountController Account = new MirGames.Controllers.T4MVC_AccountController();
    public static MirGames.Controllers.AttachmentController Attachment = new MirGames.Controllers.T4MVC_AttachmentController();
    public static MirGames.Controllers.ChatController Chat = new MirGames.Controllers.T4MVC_ChatController();
    public static MirGames.Controllers.DashboardController Dashboard = new MirGames.Controllers.T4MVC_DashboardController();
    public static MirGames.Controllers.ErrorController Error = new MirGames.Controllers.T4MVC_ErrorController();
    public static MirGames.Controllers.GitController Git = new MirGames.Controllers.T4MVC_GitController();
    public static MirGames.Controllers.OAuthController OAuth = new MirGames.Controllers.T4MVC_OAuthController();
    public static MirGames.Controllers.ProjectsController Projects = new MirGames.Controllers.T4MVC_ProjectsController();
    public static MirGames.Controllers.ToolsController Tools = new MirGames.Controllers.T4MVC_ToolsController();
    public static MirGames.Controllers.UsersController Users = new MirGames.Controllers.T4MVC_UsersController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class ForumClass
    {
        public readonly string Name = "Forum";
        public MirGames.Areas.Forum.Controllers.ForumController Forum = new MirGames.Areas.Forum.Controllers.T4MVC_ForumController();
        public T4MVC.Forum.SharedController Shared = new T4MVC.Forum.SharedController();
    }
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class TopicsClass
    {
        public readonly string Name = "Topics";
        public MirGames.Areas.Topics.Controllers.TopicsController Topics = new MirGames.Areas.Topics.Controllers.T4MVC_TopicsController();
        public T4MVC.Topics.SharedController Shared = new T4MVC.Topics.SharedController();
    }
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_JsonResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_MirGames_RssActionResult : MirGames.RssActionResult, IT4MVCActionResult
{
    public T4MVC_MirGames_RssActionResult(string area, string controller, string action, string protocol = null): base(default(System.ServiceModel.Syndication.SyndicationFeed))
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Account {
            private const string URLPATH = "~/Scripts/Account";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string AccountSettingsPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/AccountSettingsPage.min.js") ? Url("AccountSettingsPage.min.js") : Url("AccountSettingsPage.js");
            public static readonly string LoginFormController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/LoginFormController.min.js") ? Url("LoginFormController.min.js") : Url("LoginFormController.js");
            public static readonly string SignUpFormController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/SignUpFormController.min.js") ? Url("SignUpFormController.min.js") : Url("SignUpFormController.js");
        }
    
        public static readonly string ActivationNotificationController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ActivationNotificationController.min.js") ? Url("ActivationNotificationController.min.js") : Url("ActivationNotificationController.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Attachment {
            private const string URLPATH = "~/Scripts/Attachment";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string AttachmentService_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/AttachmentService.min.js") ? Url("AttachmentService.min.js") : Url("AttachmentService.js");
        }
    
        public static readonly string BasePage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/BasePage.min.js") ? Url("BasePage.min.js") : Url("BasePage.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Chat {
            private const string URLPATH = "~/Scripts/Chat";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ChatRoomPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ChatRoomPage.min.js") ? Url("ChatRoomPage.min.js") : Url("ChatRoomPage.js");
        }
    
        public static readonly string Commands_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Commands.min.js") ? Url("Commands.min.js") : Url("Commands.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Core {
            private const string URLPATH = "~/Scripts/Core";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ApiService_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ApiService.min.js") ? Url("ApiService.min.js") : Url("ApiService.js");
            public static readonly string Application_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Application.min.js") ? Url("Application.min.js") : Url("Application.js");
            public static readonly string Base64_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Base64.min.js") ? Url("Base64.min.js") : Url("Base64.js");
            public static readonly string CommandBus_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/CommandBus.min.js") ? Url("CommandBus.min.js") : Url("CommandBus.js");
            public static readonly string Config_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Config.min.js") ? Url("Config.min.js") : Url("Config.js");
            public static readonly string CurrentUser_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/CurrentUser.min.js") ? Url("CurrentUser.min.js") : Url("CurrentUser.js");
            public static readonly string EventBus_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/EventBus.min.js") ? Url("EventBus.min.js") : Url("EventBus.js");
            public static readonly string Service_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Service.min.js") ? Url("Service.min.js") : Url("Service.js");
            public static readonly string SocketService_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/SocketService.min.js") ? Url("SocketService.min.js") : Url("SocketService.js");
            public static readonly string Utils_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Utils.min.js") ? Url("Utils.min.js") : Url("Utils.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Libs {
            private const string URLPATH = "~/Scripts/Libs";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string angular_recaptcha_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-recaptcha.min.js") ? Url("angular-recaptcha.min.js") : Url("angular-recaptcha.js");
            public static readonly string angular_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular.d.min.js") ? Url("angular.d.min.js") : Url("angular.d.js");
            public static readonly string angular_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular.min.js") ? Url("angular.min.js") : Url("angular.js");
            public static readonly string eventEmitter_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eventEmitter.d.min.js") ? Url("eventEmitter.d.min.js") : Url("eventEmitter.d.js");
            public static readonly string eventEmitter_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eventEmitter.min.js") ? Url("eventEmitter.min.js") : Url("eventEmitter.js");
            public static readonly string ion_sound_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ion.sound.d.min.js") ? Url("ion.sound.d.min.js") : Url("ion.sound.d.js");
            public static readonly string ion_sound_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ion.sound.min.js") ? Url("ion.sound.min.js") : Url("ion.sound.js");
            public static readonly string jquery_1_7_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.7.1.intellisense.min.js") ? Url("jquery-1.7.1.intellisense.min.js") : Url("jquery-1.7.1.intellisense.js");
            public static readonly string jquery_1_7_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.7.1.min.js") ? Url("jquery-1.7.1.min.js") : Url("jquery-1.7.1.js");
            public static readonly string jquery_1_7_1_min_js = Url("jquery-1.7.1.min.js");
            public static readonly string jquery_autosize_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autosize.d.min.js") ? Url("jquery.autosize.d.min.js") : Url("jquery.autosize.d.js");
            public static readonly string jquery_autosize_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.autosize.min.js") ? Url("jquery.autosize.min.js") : Url("jquery.autosize.js");
            public static readonly string jquery_cookie_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.cookie.d.min.js") ? Url("jquery.cookie.d.min.js") : Url("jquery.cookie.d.js");
            public static readonly string jquery_cookie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.cookie.min.js") ? Url("jquery.cookie.min.js") : Url("jquery.cookie.js");
            public static readonly string jquery_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.d.min.js") ? Url("jquery.d.min.js") : Url("jquery.d.js");
            public static readonly string jquery_hashchange_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.hashchange.d.min.js") ? Url("jquery.hashchange.d.min.js") : Url("jquery.hashchange.d.js");
            public static readonly string jquery_hashchange_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.hashchange.min.js") ? Url("jquery.hashchange.min.js") : Url("jquery.hashchange.js");
            public static readonly string jquery_nanoscroller_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.nanoscroller.min.js") ? Url("jquery.nanoscroller.min.js") : Url("jquery.nanoscroller.js");
            public static readonly string jquery_naturalWidth_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.naturalWidth.d.min.js") ? Url("jquery.naturalWidth.d.min.js") : Url("jquery.naturalWidth.d.js");
            public static readonly string jquery_naturalWidth_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.naturalWidth.min.js") ? Url("jquery.naturalWidth.min.js") : Url("jquery.naturalWidth.js");
            public static readonly string jquery_signalR_2_0_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.signalR-2.0.2.min.js") ? Url("jquery.signalR-2.0.2.min.js") : Url("jquery.signalR-2.0.2.js");
            public static readonly string jquery_signalR_2_0_2_min_js = Url("jquery.signalR-2.0.2.min.js");
            public static readonly string linq_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/linq.d.min.js") ? Url("linq.d.min.js") : Url("linq.d.js");
            public static readonly string linq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/linq.min.js") ? Url("linq.min.js") : Url("linq.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class markdown {
                private const string URLPATH = "~/Scripts/Libs/markdown";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string AutoLinkTransform_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/AutoLinkTransform.min.js") ? Url("AutoLinkTransform.min.js") : Url("AutoLinkTransform.js");
                public static readonly string MarkdownDeep_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MarkdownDeep.d.min.js") ? Url("MarkdownDeep.d.min.js") : Url("MarkdownDeep.d.js");
                public static readonly string MarkdownDeep_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MarkdownDeep.min.js") ? Url("MarkdownDeep.min.js") : Url("MarkdownDeep.js");
                public static readonly string MarkdownDeepEditor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MarkdownDeepEditor.min.js") ? Url("MarkdownDeepEditor.min.js") : Url("MarkdownDeepEditor.js");
                public static readonly string MarkdownDeepEditorUI_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MarkdownDeepEditorUI.min.js") ? Url("MarkdownDeepEditorUI.min.js") : Url("MarkdownDeepEditorUI.js");
            }
        
            public static readonly string md5_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/md5.d.min.js") ? Url("md5.d.min.js") : Url("md5.d.js");
            public static readonly string md5_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/md5.min.js") ? Url("md5.min.js") : Url("md5.js");
            public static readonly string moment_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment.d.min.js") ? Url("moment.d.min.js") : Url("moment.d.js");
            public static readonly string moment_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment.min.js") ? Url("moment.min.js") : Url("moment.js");
            public static readonly string ng_quick_date_coffee = Url("ng-quick-date.coffee");
            public static readonly string ng_quick_date_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ng-quick-date.min.js") ? Url("ng-quick-date.min.js") : Url("ng-quick-date.js");
            public static readonly string ng_quick_date_min_js = Url("ng-quick-date.min.js");
            public static readonly string qbaka_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/qbaka.min.js") ? Url("qbaka.min.js") : Url("qbaka.js");
            public static readonly string signalr_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/signalr.d.min.js") ? Url("signalr.d.min.js") : Url("signalr.d.js");
            public static readonly string tinycon_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tinycon.d.min.js") ? Url("tinycon.d.min.js") : Url("tinycon.d.js");
            public static readonly string tinycon_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tinycon.min.js") ? Url("tinycon.min.js") : Url("tinycon.js");
            public static readonly string ui_bootstrap_custom_0_5_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui-bootstrap-custom-0.5.0.min.js") ? Url("ui-bootstrap-custom-0.5.0.min.js") : Url("ui-bootstrap-custom-0.5.0.js");
        }
    
        public static readonly string Manager_ttinclude = Url("Manager.ttinclude");
        public static readonly string MirGames_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MirGames.min.js") ? Url("MirGames.min.js") : Url("MirGames.js");
        public static readonly string NavigationController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/NavigationController.min.js") ? Url("NavigationController.min.js") : Url("NavigationController.js");
        public static readonly string OnlineUsersController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/OnlineUsersController.min.js") ? Url("OnlineUsersController.min.js") : Url("OnlineUsersController.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class projects {
            private const string URLPATH = "~/Scripts/projects";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string AddWorkItemDialogController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/AddWorkItemDialogController.min.js") ? Url("AddWorkItemDialogController.min.js") : Url("AddWorkItemDialogController.js");
            public static readonly string NewProjectPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/NewProjectPage.min.js") ? Url("NewProjectPage.min.js") : Url("NewProjectPage.js");
            public static readonly string ProjectCodeFilePage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProjectCodeFilePage.min.js") ? Url("ProjectCodeFilePage.min.js") : Url("ProjectCodeFilePage.js");
            public static readonly string ProjectSettingsPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProjectSettingsPage.min.js") ? Url("ProjectSettingsPage.min.js") : Url("ProjectSettingsPage.js");
            public static readonly string ProjectWorkItemBlocks_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProjectWorkItemBlocks.min.js") ? Url("ProjectWorkItemBlocks.min.js") : Url("ProjectWorkItemBlocks.js");
            public static readonly string ProjectWorkItemList_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProjectWorkItemList.min.js") ? Url("ProjectWorkItemList.min.js") : Url("ProjectWorkItemList.js");
            public static readonly string ProjectWorkItemPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProjectWorkItemPage.min.js") ? Url("ProjectWorkItemPage.min.js") : Url("ProjectWorkItemPage.js");
            public static readonly string ProjectWorkItemsPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProjectWorkItemsPage.min.js") ? Url("ProjectWorkItemsPage.min.js") : Url("ProjectWorkItemsPage.js");
        }
    
        public static readonly string RequestNotificationController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/RequestNotificationController.min.js") ? Url("RequestNotificationController.min.js") : Url("RequestNotificationController.js");
        public static readonly string Router_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Router.d.min.js") ? Url("Router.d.min.js") : Url("Router.d.js");
        public static readonly string Settings_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Settings.min.js") ? Url("Settings.min.js") : Url("Settings.js");
        public static readonly string SocketNotificationController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/SocketNotificationController.min.js") ? Url("SocketNotificationController.min.js") : Url("SocketNotificationController.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Tools {
            private const string URLPATH = "~/Scripts/Tools";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string EventLogPage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/EventLogPage.min.js") ? Url("EventLogPage.min.js") : Url("EventLogPage.js");
        }
    
        public static readonly string TypeLite_tt = Url("TypeLite.tt");
        public static readonly string TypeLite_d_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TypeLite.d.min.js") ? Url("TypeLite.d.min.js") : Url("TypeLite.d.js");
        public static readonly string TypeLiteEnums_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TypeLiteEnums.min.js") ? Url("TypeLiteEnums.min.js") : Url("TypeLiteEnums.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class UI {
            private const string URLPATH = "~/Scripts/UI";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string AppScope_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/AppScope.min.js") ? Url("AppScope.min.js") : Url("AppScope.js");
            public static readonly string Autofill_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Autofill.min.js") ? Url("Autofill.min.js") : Url("Autofill.js");
            public static readonly string DateInput_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DateInput.min.js") ? Url("DateInput.min.js") : Url("DateInput.js");
            public static readonly string Dialog_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Dialog.min.js") ? Url("Dialog.min.js") : Url("Dialog.js");
            public static readonly string Draggable_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Draggable.min.js") ? Url("Draggable.min.js") : Url("Draggable.js");
            public static readonly string File_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/File.min.js") ? Url("File.min.js") : Url("File.js");
            public static readonly string NotificationService_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/NotificationService.min.js") ? Url("NotificationService.min.js") : Url("NotificationService.js");
            public static readonly string TextEditor_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TextEditor.min.js") ? Url("TextEditor.min.js") : Url("TextEditor.js");
            public static readonly string TinyEditor_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/TinyEditor.min.js") ? Url("TinyEditor.min.js") : Url("TinyEditor.js");
        }
    
        public static readonly string UserNotificationController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/UserNotificationController.min.js") ? Url("UserNotificationController.min.js") : Url("UserNotificationController.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Users {
            private const string URLPATH = "~/Scripts/Users";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ProfilePage_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProfilePage.min.js") ? Url("ProfilePage.min.js") : Url("ProfilePage.js");
            public static readonly string SearchPanelController_ts = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/SearchPanelController.min.js") ? Url("SearchPanelController.min.js") : Url("SearchPanelController.js");
        }
    
        public static readonly string Web_config = Url("Web.config");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class account {
            private const string URLPATH = "~/Content/account";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        }
    
        public static readonly string avatars_less = Url("avatars.less");
        public static readonly string avatars_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/avatars.min.css") ? Url("avatars.min.css") : Url("avatars.css");
             
        public static readonly string avatars_css_map = Url("avatars.css.map");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class chat {
            private const string URLPATH = "~/Content/chat";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string chat_room_less = Url("chat-room.less");
            public static readonly string chat_room_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/chat-room.min.css") ? Url("chat-room.min.css") : Url("chat-room.css");
                 
            public static readonly string chat_room_css_map = Url("chat-room.css.map");
        }
    
        public static readonly string common_less = Url("common.less");
        public static readonly string common_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/common.min.css") ? Url("common.min.css") : Url("common.css");
             
        public static readonly string common_css_map = Url("common.css.map");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class dashboard {
            private const string URLPATH = "~/Content/dashboard";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string dashboard_page_less = Url("dashboard-page.less");
            public static readonly string dashboard_page_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dashboard-page.min.css") ? Url("dashboard-page.min.css") : Url("dashboard-page.css");
                 
            public static readonly string dashboard_page_css_map = Url("dashboard-page.css.map");
            public static readonly string mixins_less = Url("mixins.less");
            public static readonly string mixins_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mixins.min.css") ? Url("mixins.min.css") : Url("mixins.css");
                 
            public static readonly string mixins_css_map = Url("mixins.css.map");
        }
    
        public static readonly string dialogs_less = Url("dialogs.less");
        public static readonly string dialogs_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialogs.min.css") ? Url("dialogs.min.css") : Url("dialogs.css");
             
        public static readonly string dialogs_css_map = Url("dialogs.css.map");
        public static readonly string flexbox_less = Url("flexbox.less");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class font_awesome {
            private const string URLPATH = "~/Content/font-awesome";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bordered_pulled_less = Url("bordered-pulled.less");
            public static readonly string core_less = Url("core.less");
            public static readonly string fixed_width_less = Url("fixed-width.less");
            public static readonly string font_awesome_less = Url("font-awesome.less");
            public static readonly string font_awesome_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/font-awesome.min.css") ? Url("font-awesome.min.css") : Url("font-awesome.css");
                 
            public static readonly string icons_less = Url("icons.less");
            public static readonly string larger_less = Url("larger.less");
            public static readonly string list_less = Url("list.less");
            public static readonly string mixins_less = Url("mixins.less");
            public static readonly string path_less = Url("path.less");
            public static readonly string rotated_flipped_less = Url("rotated-flipped.less");
            public static readonly string spinning_less = Url("spinning.less");
            public static readonly string stacked_less = Url("stacked.less");
            public static readonly string variables_less = Url("variables.less");
            public static readonly string variables_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/variables.min.css") ? Url("variables.min.css") : Url("variables.css");
                 
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fonts {
            private const string URLPATH = "~/Content/fonts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string droidsans_webfont_eot = Url("droidsans-webfont.eot");
            public static readonly string droidsans_webfont_svg = Url("droidsans-webfont.svg");
            public static readonly string droidsans_webfont_ttf = Url("droidsans-webfont.ttf");
            public static readonly string droidsans_webfont_woff = Url("droidsans-webfont.woff");
            public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
            public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
            public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
            public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
            public static readonly string FontAwesome_otf = Url("FontAwesome.otf");
        }
    
        public static readonly string forms_less = Url("forms.less");
        public static readonly string forms_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/forms.min.css") ? Url("forms.min.css") : Url("forms.css");
             
        public static readonly string forms_css_map = Url("forms.css.map");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class forum {
            private const string URLPATH = "~/Content/forum";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string mixins_less = Url("mixins.less");
            public static readonly string mixins_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mixins.min.css") ? Url("mixins.min.css") : Url("mixins.css");
                 
            public static readonly string mixins_css_map = Url("mixins.css.map");
            public static readonly string new_topic_less = Url("new-topic.less");
            public static readonly string new_topic_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/new-topic.min.css") ? Url("new-topic.min.css") : Url("new-topic.css");
                 
            public static readonly string new_topic_css_map = Url("new-topic.css.map");
            public static readonly string topic_less = Url("topic.less");
            public static readonly string topic_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topic.min.css") ? Url("topic.min.css") : Url("topic.css");
                 
            public static readonly string topic_css_map = Url("topic.css.map");
            public static readonly string topics_less = Url("topics.less");
            public static readonly string topics_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topics.min.css") ? Url("topics.min.css") : Url("topics.css");
                 
            public static readonly string topics_css_map = Url("topics.css.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Content/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ajax_loader_gif = Url("ajax-loader.gif");
            public static readonly string avatar_png = Url("avatar.png");
            public static readonly string diag_line_png = Url("diag_line.png");
            public static readonly string footer_bgr_png = Url("footer_bgr.png");
            public static readonly string header_bgr_png = Url("header_bgr.png");
            public static readonly string logo_png = Url("logo.png");
            public static readonly string main_bgr_png = Url("main_bgr.png");
            public static readonly string main_bgr2_png = Url("main_bgr2.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class providers {
                private const string URLPATH = "~/Content/images/providers";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bitbucket_png = Url("bitbucket.png");
                public static readonly string facebook_png = Url("facebook.png");
                public static readonly string github_png = Url("github.png");
                public static readonly string google_png = Url("google.png");
                public static readonly string microsoft_png = Url("microsoft.png");
                public static readonly string twitter_png = Url("twitter.png");
            }
        
            public static readonly string rss_png = Url("rss.png");
            public static readonly string top_header_bgr_png = Url("top_header_bgr.png");
            public static readonly string top_header_bgr2_png = Url("top_header_bgr2.png");
            public static readonly string top_header_bgr3_png = Url("top_header_bgr3.png");
            public static readonly string top_header_bgr4_png = Url("top_header_bgr4.png");
            public static readonly string top_header_bgr5_png = Url("top_header_bgr5.png");
            public static readonly string top_header_bgr6_png = Url("top_header_bgr6.png");
            public static readonly string top_header_nav_bgr_png = Url("top_header_nav_bgr.png");
            public static readonly string wmd_buttons_png = Url("wmd-buttons.png");
        }
    
        public static readonly string nanoscroller_less = Url("nanoscroller.less");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class projects {
            private const string URLPATH = "~/Content/projects";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string item_block_template_html = Url("item-block-template.html");
            public static readonly string mixins_less = Url("mixins.less");
            public static readonly string mixins_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mixins.min.css") ? Url("mixins.min.css") : Url("mixins.css");
                 
            public static readonly string mixins_css_map = Url("mixins.css.map");
            public static readonly string project_code_file_less = Url("project-code-file.less");
            public static readonly string project_code_file_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/project-code-file.min.css") ? Url("project-code-file.min.css") : Url("project-code-file.css");
                 
            public static readonly string project_code_file_css_map = Url("project-code-file.css.map");
            public static readonly string project_code_less = Url("project-code.less");
            public static readonly string project_code_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/project-code.min.css") ? Url("project-code.min.css") : Url("project-code.css");
                 
            public static readonly string project_code_css_map = Url("project-code.css.map");
            public static readonly string project_new_less = Url("project-new.less");
            public static readonly string project_new_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/project-new.min.css") ? Url("project-new.min.css") : Url("project-new.css");
                 
            public static readonly string project_new_css_map = Url("project-new.css.map");
            public static readonly string project_settings_less = Url("project-settings.less");
            public static readonly string project_settings_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/project-settings.min.css") ? Url("project-settings.min.css") : Url("project-settings.css");
                 
            public static readonly string project_settings_css_map = Url("project-settings.css.map");
            public static readonly string project_work_item_less = Url("project-work-item.less");
            public static readonly string project_work_item_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/project-work-item.min.css") ? Url("project-work-item.min.css") : Url("project-work-item.css");
                 
            public static readonly string project_work_item_css_map = Url("project-work-item.css.map");
            public static readonly string project_work_items_less = Url("project-work-items.less");
            public static readonly string project_work_items_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/project-work-items.min.css") ? Url("project-work-items.min.css") : Url("project-work-items.css");
                 
            public static readonly string project_work_items_css_map = Url("project-work-items.css.map");
            public static readonly string project_less = Url("project.less");
            public static readonly string project_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/project.min.css") ? Url("project.min.css") : Url("project.css");
                 
            public static readonly string project_css_map = Url("project.css.map");
            public static readonly string projects_less = Url("projects.less");
            public static readonly string projects_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/projects.min.css") ? Url("projects.min.css") : Url("projects.css");
                 
            public static readonly string projects_css_map = Url("projects.css.map");
            public static readonly string work_item_blocks_html = Url("work-item-blocks.html");
            public static readonly string work_items_list_html = Url("work-items-list.html");
        }
    
        public static readonly string quick_date_less = Url("quick-date.less");
        public static readonly string quick_date_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/quick-date.min.css") ? Url("quick-date.min.css") : Url("quick-date.css");
             
        public static readonly string quick_date_css_map = Url("quick-date.css.map");
        public static readonly string settings_less = Url("settings.less");
        public static readonly string settings_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/settings.min.css") ? Url("settings.min.css") : Url("settings.css");
             
        public static readonly string settings_css_map = Url("settings.css.map");
        public static readonly string text_less = Url("text.less");
        public static readonly string text_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/text.min.css") ? Url("text.min.css") : Url("text.css");
             
        public static readonly string text_css_map = Url("text.css.map");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class tools {
            private const string URLPATH = "~/Content/tools";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string event_log_page_less = Url("event-log-page.less");
            public static readonly string event_log_page_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/event-log-page.min.css") ? Url("event-log-page.min.css") : Url("event-log-page.css");
                 
            public static readonly string event_log_page_css_map = Url("event-log-page.css.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class topics {
            private const string URLPATH = "~/Content/topics";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string edit_topic_less = Url("edit-topic.less");
            public static readonly string edit_topic_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/edit-topic.min.css") ? Url("edit-topic.min.css") : Url("edit-topic.css");
                 
            public static readonly string edit_topic_css_map = Url("edit-topic.css.map");
            public static readonly string mixins_less = Url("mixins.less");
            public static readonly string mixins_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mixins.min.css") ? Url("mixins.min.css") : Url("mixins.css");
                 
            public static readonly string mixins_css_map = Url("mixins.css.map");
            public static readonly string new_topic_less = Url("new-topic.less");
            public static readonly string new_topic_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/new-topic.min.css") ? Url("new-topic.min.css") : Url("new-topic.css");
                 
            public static readonly string new_topic_css_map = Url("new-topic.css.map");
            public static readonly string topic_less = Url("topic.less");
            public static readonly string topic_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topic.min.css") ? Url("topic.min.css") : Url("topic.css");
                 
            public static readonly string topic_css_map = Url("topic.css.map");
            public static readonly string topics_less = Url("topics.less");
            public static readonly string topics_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topics.min.css") ? Url("topics.min.css") : Url("topics.css");
                 
            public static readonly string topics_css_map = Url("topics.css.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class ui {
            private const string URLPATH = "~/Content/ui";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string dropdown_less = Url("dropdown.less");
            public static readonly string dropdown_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dropdown.min.css") ? Url("dropdown.min.css") : Url("dropdown.css");
                 
            public static readonly string dropdown_css_map = Url("dropdown.css.map");
            public static readonly string user_notifications_less = Url("user-notifications.less");
            public static readonly string user_notifications_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/user-notifications.min.css") ? Url("user-notifications.min.css") : Url("user-notifications.css");
                 
            public static readonly string user_notifications_css_map = Url("user-notifications.css.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class users {
            private const string URLPATH = "~/Content/users";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string mixins_less = Url("mixins.less");
            public static readonly string mixins_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mixins.min.css") ? Url("mixins.min.css") : Url("mixins.css");
                 
            public static readonly string mixins_css_map = Url("mixins.css.map");
            public static readonly string profile_page_less = Url("profile-page.less");
            public static readonly string chat_room_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/chat-room.min.css") ? Url("chat-room.min.css") : Url("chat-room.css");
                 
            public static readonly string profile_page_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/profile-page.min.css") ? Url("profile-page.min.css") : Url("profile-page.css");
                 
            public static readonly string profile_page_css_map = Url("profile-page.css.map");
            public static readonly string user_comments_less = Url("user-comments.less");
            public static readonly string user_comments_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/user-comments.min.css") ? Url("user-comments.min.css") : Url("user-comments.css");
                 
            public static readonly string user_comments_css_map = Url("user-comments.css.map");
            public static readonly string user_forum_posts_less = Url("user-forum-posts.less");
            public static readonly string user_forum_posts_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/user-forum-posts.min.css") ? Url("user-forum-posts.min.css") : Url("user-forum-posts.css");
                 
            public static readonly string user_forum_posts_css_map = Url("user-forum-posts.css.map");
            public static readonly string user_login_dialog_less = Url("user-login-dialog.less");
            public static readonly string user_topics_less = Url("user-topics.less");
            public static readonly string user_topics_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/user-topics.min.css") ? Url("user-topics.min.css") : Url("user-topics.css");
                 
            public static readonly string user_topics_css_map = Url("user-topics.css.map");
            public static readonly string user_less = Url("user.less");
            public static readonly string user_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/user.min.css") ? Url("user.min.css") : Url("user.css");
                 
            public static readonly string user_css_map = Url("user.css.map");
            public static readonly string users_less = Url("users.less");
            public static readonly string users_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/users.min.css") ? Url("users.min.css") : Url("users.css");
                 
            public static readonly string users_css_map = Url("users.css.map");
        }
    
        public static readonly string Web_config = Url("Web.config");
        public static readonly string wmd_less = Url("wmd.less");
        public static readonly string wmd_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wmd.min.css") ? Url("wmd.min.css") : Url("wmd.css");
             
        public static readonly string wmd_css_map = Url("wmd.css.map");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


